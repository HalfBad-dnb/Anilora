# Application Name
spring.application.name=Pirk

# Server Configuration
server.port=8080
# The port for the application (change if needed)

# PostgreSQL DataSource Configuration
spring.datasource.url=jdbc:postgresql://localhost:5434/postgres
# URL for PostgreSQL database (verify the host, port, and database name)
spring.datasource.username=${DB_USERNAME:postgres}
# Your PostgreSQL username (use environment variable in production)
spring.datasource.password=${DB_PASSWORD:admin}
# Your PostgreSQL password (use environment variable in production)
spring.datasource.driver-class-name=org.postgresql.Driver
# PostgreSQL driver class name
spring.datasource.hikari.connection-timeout=30000
# Connection timeout in milliseconds (adjust if necessary)
spring.datasource.hikari.maximum-pool-size=10
# Maximum number of connections in the connection pool
spring.datasource.hikari.idle-timeout=600000
# Idle connection timeout in milliseconds (adjust if necessary)

spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB

# Hibernate JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# Hibernate dialect for PostgreSQL
spring.jpa.hibernate.ddl-auto=update
# Specify the dialect for PostgreSQL in Hibernate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Initialize schema and data
spring.sql.init.mode=never
spring.sql.init.platform=postgresql
spring.jpa.defer-datasource-initialization=true
#spring.sql.init.data-locations=classpath:data.sql

# CORS Configuration
spring.mvc.cors.allowed-origins=http://localhost:5173
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allowed-headers=*
spring.mvc.cors.allow-credentials=true

# Database logging
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
#spring.flyway.clean-on-validation-error=true
#spring.flyway.clean-disabled=false
# Automatically update the schema (use with caution in production)

# Hibernate Default Schema (optional)
spring.jpa.properties.hibernate.default_schema=public
# Default schema for Hibernate (optional, defaults to 'public')

# Logging Configuration
logging.level.org.springframework.security=DEBUG
# Log Spring Security events (useful for debugging)

# Disable Spring Boot Banner (optional)
spring.main.banner-mode=off
# Disables the Spring Boot startup banner

# Error Page Configuration
server.error.whitelabel.enabled=true
# Enable default error pages for unhandled errors

# OAuth2 Configuration (for OAuth2 client login)
# OAuth2 Google Configuration (example)
spring.security.oauth2.client.registration.google.client-id=your-google-client-id
spring.security.oauth2.client.registration.google.client-secret=your-google-client-secret
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.client-name=Google

# OAuth2 GitHub Configuration (example)
spring.security.oauth2.client.registration.github.client-id=your-github-client-id
spring.security.oauth2.client.registration.github.client-secret=your-github-client-secret
spring.security.oauth2.client.registration.github.scope=user
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.github.client-name=GitHub

# OAuth2 Authorization Server Configuration (if you are building your own OAuth2 server)
#spring.security.oauth2.authorization-server.issuer-uri=https://your-authorization-server-url
# Uncomment and set if using your own OAuth2 authorization server

